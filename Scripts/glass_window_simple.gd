extends Node3D

@export var broken_model: PackedScene
@export var INTENSITY: float = 0.1
@export var LIFETIME: float = 4.0
@export var active_limit :int = 82  # üí• –º–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Å–∫–æ–≤
@export var active_count :int = 0
@export var spread_deg := 15.0

func _on_area_3d_body_entered(body: Node) -> void:
	_break_glass(body)
	
	
func _break_glass(collider: Node) -> void:
	# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞–∑–±–∏—Ç–æ–≥–æ —Å—Ç–µ–∫–ª–∞
	
	
	#broken_instance.global_transform = global_transform
	var speed = 0.0
	var direction = Vector3.ZERO
	
	if "velocity" in collider:  # –µ—Å–ª–∏ –¥—Ä–æ–Ω —Ö—Ä–∞–Ω–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å
		speed = collider.velocity.length()
		direction = collider.velocity.normalized()
	elif collider is RigidBody3D:
		speed = collider.linear_velocity.length()
		direction = collider.linear_velocity.normalized()
	else:
		speed = INTENSITY * 0.5  # –∑–∞–ø–∞—Å–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–æ–¥
		direction = (collider.global_transform.origin - self.global_transform.origin).normalized()
	
	var broken_instance: Node3D = broken_model.instantiate()
	get_parent().add_child(broken_instance)
	var pieces = broken_instance.model.get_children()
	self.queue_free()
	AudioManager.just_play_sound("glass_break", position)
	
	for rb in pieces:
		if rb is RigidBody3D:
			if active_count < active_limit:
				active_count+=1
				# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É–≥–ª—ã –¥–ª—è X –∏ Z (Y –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)
				var angle_x = randf_range(-spread_deg, spread_deg)
				var angle_z = randf_range(-spread_deg, spread_deg)
				
				# –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—Ä–∞—â–∞–µ–º –ø–æ–¥ —É–≥–ª–æ–º
				var force_dir = direction.rotated(Vector3.RIGHT, deg_to_rad(angle_x))
				force_dir = force_dir.rotated(Vector3.FORWARD, deg_to_rad(angle_z))
				
				# –°–∏–ª–∞ –∏–º–ø—É–ª—å—Å–∞ (–º–æ–∂–Ω–æ sqrt(speed) –∏–ª–∏ –ª–∏–Ω–µ–π–Ω–æ speed)
				var impulse_force = force_dir * INTENSITY * speed
				rb.apply_central_impulse(impulse_force)
			else:
				# üßä –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º–∏
				
				rb.sleeping = true
			
	get_tree().create_timer(LIFETIME).timeout.connect(Callable(broken_instance, "fade_and_delete"))
	
